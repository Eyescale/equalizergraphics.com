#define S_HOME
#define S_HOME_ABOUT
#define PAGE About
#define SUBPAGE Parallel Rendering
#define DESCRIPTION "Equalizer is an open source programming interface and resource management system for scalable OpenGL applications"
#define KEYWORDS "parallel rendering, framework, distributed, Equalizer, OpenGL, scalable graphics, cluster, graphics clusters, visualization, multi-GPU"

#include "header.shtml"

<div class="float_right">
  <a href="images/parallel.png"><img src="images/parallel-small.jpg" 
                                     alt="Scalable Rendering"></a>
  <div class="label">Eight-to-One Scalable Rendering</div>
</div>
<p>
  Equalizer is an open source programming interface and resource management
  system for <em>scalable OpenGL applications</em>. An Equalizer application can
  run unmodified on any visualization system, from a singlepipe workstation to
  large scale <em>graphics clusters</em> and <em>multi-GPU</em>
  workstations. Equalizer is built upon a parallel, scalable programming
  interface solving  problems that are common to any multipipe application. The API
  is <em>minimally invasive</em>, making application porting as easy as possible
  while delivering maximum performance.
  <br><a href="useCases.html">More about use cases...</a>
</p>
<h2>Compatibility</h2>
<p>
  Equalizer is a cross-platform toolkit and is initially available for Linux and
  Mac OS X. A Windows version is planned for the next
  release. Please <a href="contact.html">contact us</a> if you are interested to
  learn more about Equalizer, to participate in its design and development, or
  if you have any other questions.
</p>
<h2>License</h2>
<p>
  The Equalizer framework is licensed under the
  <a href="http://www.gnu.org/licenses/lgpl.html">LGPL open source license</a>,
  which allows usage in commercial and open source projects without
  licensing costs, with the only restriction that any changes to the framework
  itself have to be contributed back to open source.
</p>

<h2>Project Vision</h2>
<p>
  The progress of High-Performance Visualization (HPV) has been sluggish due to
  the lack of an universally accepted programming framework, proprietary
  software and vendor lock-in. The Equalizer project will provide the standard
  programming and deployment environment for multipipe applications, ranging
  from workstations to large-scale HPV clusters. The goal for Equalizer is to
  reach a status similar to the MPI library, but for interactive 3D graphics
  applications. Our focus is to provide the best framework to
  develop <em>scalable graphics</em> applications, not to provide another
  (semi-)transparent OpenGL layer. To achieve this goal we adopt an open
  approach both for the design and development and for the source code itself, and
  therefore invite programmers, researchers, independent software vendors and
  hardware manufacturers to contribute to this project.
</p>

<h2>Components</h2>
<h3>Resource Management System</h3>
<p>
  The core of Equalizer is the configuration server. It is configured once for a
  visualization system, and it knows the system's resources and how to use
  them. It will provide system-wide load balancing and resource allocation for
  all applications.
  <br><a href="configuration.html">More about resource management...</a>
</p>
<h3>Programming Framework</h3>
<div class="float_right">
  <a href="http://www.opengl.org"><img src="images/ogl.jpg"
                                       alt="OpenGL logo"></a>
</div>
<p>
  Application developers use the Equalizer client library to write parallel,
  scalable OpenGL applications. The Equalizer client library is the interface to
  the Equalizer server, and it abstracts the application from the actual
  configuration of the execution environment. Compared to other
  cluster-rendering software, it does not replace the OpenGL library but
  parallelizes and distributes the application's rendering code for optimal
  performance.
</p><p>
  Equalizer provides the natural execution framework for any multi-pipe
  application and does not impose any specific rendering framework, such
  as a scenegraph, to the application. It uses a minimally invasive approach,
  providing the functionality common to multipipe applications, thus
  making it as easy as possible to port existing applications to Equalizer.
  <br><a href="api.html">More about the programming interface...</a>
</p><p>
  In addition to traditional multi-pipe execution, where one graphics card 
 drives one display device, Equalizer offers a broad range of
  decomposition modes to accelerate the rendering of large data sets by
  parallelizing the rendering of a single view across multiple graphics cards,
  processors and computers.
  <br><a href="scalability.html">More about scalability...</a>
</p>
<h3>Transparent OpenGL Layer</h3>
<p>
  The transparent layer will enable the execution of unmodified OpenGL
  applications. They can take advantage of the system's resource management and
  load balancing, without any additional configuration. This layer will allow a
  seamless integration of unmodified and scalable applications on the same
  system, and deliver similar performance as existing solutions.
</p>
<h3>Distributed Scene Graphs</h3>
<p>
  Equalizer will provide sample implementations for popular scene graphs, such
  as <a href="http://www.openscenegraph.org/">OpenSceneGraph</a>, 
  <a href="http://www.coin3d.org/">Coin3D</a>
  or <a href="http://www.ogre3d.org/">Ogre3D</a>. Applications using these scene
  graphs can then easily implement parallel, scalable applications which
  integrate well with other applications based on Equalizer, and profit from the
  feature set of Equalizer.
</p>
<div class="footnote">
Linux&reg; is a trademark of Linus Torvalds. Mac OS&reg; is a trademark of Apple
Computer, Inc. OpenGL&reg; are trademarks of Silicon Graphics, Inc. Windows&reg;
is a trademark of Microsoft Corporation. All other products named are trademarks
of their respective owners.
</div>

#include "footer.shtml"
<!-- $Id$ -->
