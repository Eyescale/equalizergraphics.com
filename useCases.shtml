#define S_HOME
#define S_HOME_USECASES
#define PAGE About
#define SUBPAGE Use Cases
 
#define DESCRIPTION "Equalizer allows a flexible configuration at runtime for various use cases."
#define KEYWORDS "scalability, Equalizer, OpenGL, compound, cluster, multi-GPU, multicore"

#include "header.shtml"

<h2>Table of Contents</h2>
<ul class ="toc1">
  <li><a href="#display">Display Environments</a></li>
  <ul class ="toc2">
    <li><a href="#wall">Display Walls</a></li>
    <li><a href="#vr">Virtual Reality</a></li>
    <li><a href="#multipipe">Multi-GPU Workstation</a></li>
    <li><a href="#scalable">Scalable Rendering</a></li>
    <li><a href="#remote">Remote Visualization Clusters</a></li>
    <li><a href="#sli">SLI and Crossfire Systems</a></li>
  </ul>
  <li><a href="#applications">Applications</a></li>
  <ul class ="toc2">
    <li><a href="#sciviz">Scientific Visualization</a></li>
    <li><a href="#medical">Medical Imaging</a></li>
    <li><a href="#oilgas">Oil and Gas</a></li>
  </ul>
</ul>

<a name="display"></a>
<h2>Display Environments</h2>
<p>
  Equalizer abstracts the actual configuration from the application code. This
  allows a single application to be deployed in a wide range of
  configurations. The flexibility of Equalizer enables mixing the features
  described below or completely different applications, often even in unforeseen
  ways.
</p>

<a name="wall"></a>
<h3>Display Walls</h3>
<div class="float_right"><a href="images/wall.png">
        <img src="images/wall-small.jpg" alt="A display wall configuration"></a>
  <div class="label">A display wall configuration</div>
</div>
<p>
  Display walls are one of the most common use case for visualization
  clusters today. Equalizer can drive such large scale displays. The typical
  configuration, as shown on the right, executes one instance of the
  application's rendering code for each display. The applications will therefore
  get optimal performance due to the local, parallel OpenGL execution for each
  display device.
</p><div class="flush_float"></div>

<a name="vr"></a>
<h3>Virtual Reality</h3>
<div class="float_right"><a href="images/vr.png">
  <img src="images/vr-small.jpg" 
       alt="A four-sided Virtual Reality installation"></a>
  <div class="label">A four-sided Virtual Reality installation</div>
</div>
<p>
  Virtual Reality installations immerse the viewer into a virtual world, by
  using stereo rendering on multiple, non-planar walls. Head tracking is used to
  adapt the rendering to the observer's position to provide the complete
  illusion of virtual environment. Equalizer provides both active and passive
  stereo rendering used in such environments, with the possibility to render
  each stereo view using a separate CPU and graphic card. While support for
  specific tracking devices is not in the scope of Equalizer, external devices
  can be integrated through a simple head tracking API.
</p><div class="flush_float"></div>

<a name="multipipe"></a>
<h3>Multi-GPU Workstations</h3>
<div class="float_right"><a href="images/workstation.png">
  <img src="images/workstation-small.jpg" alt="A multipipe workstation"></a>
  <div class="label">A multi-GPU workstation</div>
</div>
<p>
  Multipipe and multicore workstations are an affordable way to scale the
  rendering performance and display size. Equalizer applications can exploit
  multiple processors or processor cores, as well as multiple graphic cards by
  running one rendering thread per graphic card. The configuration shown on the
  left would execute two rendering threads alongside the application threads,
  thus utilizing up to three CPU cores. It is also possible to use additional
  graphic card(s) to contribute to the rendering of one view, as described next.
</p><div class="flush_float"></div>

<a name="scalable"></a>
<h3>Scalable Rendering</h3>
<div class="float_right"><a href="images/scalable.png">
  <img src="images/scalable-small.jpg" alt="Sort-last scalable rendering"></A>
  <div class="label">Sort-last scalable rendering</div>
</div>
<p>
  Scalable rendering combines multiple graphic cards, processors and systems to
  render a single (or multiple) views. Various algorithms are implemented by
  Equalizer, as described on the <a href="scalability.html">scalability
  page</a>, and can be combined in any way for rendering. Examples of this use
  case are using two graphic cards in one system to render each one eye view in
  stereo rendering, or using a cluster of machines to divide the database for
  rendering, as shown on the left.
</p><div class="flush_float"></div>

<a name="remote"></a>
<h3>Remote Visualization Clusters</h3>
<div class="float_right"><a href="images/remote.png">
  <img src="images/remote-small.jpg" alt="A remote visualization cluster"></a>
  <div class="label">A remote visualization cluster</div>
</div>
<p>
  Remote visualization clusters are an cost-efficient way of centralizing large
  scale data. Simulation data reaches multiple terabytes in size, making it time
  consuming and costly to move the data to the user workstations. Equalizer will
  provide remote visualization capabilities, allowing all applications to run on
  a central cluster, close to the data. The Equalizer server will be able to
  load balance multiple application dynamically, so that users experience the
  optimal performance under the given load. Multiple rendering nodes can
  parallelize the rendering for a single user.
</p><div class="flush_float"></div>

<a name="sli"></a>
<h3>SLI and Crossfire Systems</h3>
<div class="float_right"><a href="images/SLI.png">
  <img src="images/SLI-small.jpg" alt="A SLI/Crossfire configuration"></a>
  <div class="label">A SLI/Crossfire configuration</div>
</div>
<p>
  <a href="http://www.slizone.com/page/home.html">NVIDIA SLI</a> and
  <a href="http://www.ati.com/technology/crossfire/index.html">ATI Crossfire</a>
  systems are currently driven by a single rendering thread, whose OpenGL
  rendering stream is multiplexed transparently to each graphic card by the
  driver. Once the hardware vendors expose an API to program the composition
  hardware, Equalizer can be easily adapted to make full use of the hardware by
  running one rendering thread per graphic card, as well as to dynamically
  update the configuration to provide good load balancing across all rendering
  threads.
</p><div class="flush_float"></div>


<a name="applications"></a>
<h2>Applications</h2>
<p>
  Equalizer does not interfere with the application's rendering code. It can be
  used for parallelizing any visualization application based on OpenGL, which
  allows it to be used in all markets which can benefit of parallel rendering. A
  fex examples are given below.
</p>


<a name="sciviz"></a>
<h3>Scientific Visualization</h3>
<p>
  Scientific Visualization analyzes huge amounts of data generated from
  numerical simulations. This data has to be processed and analyzed to generate
  understanding of the results. Equalizer can help this process by breaking the
  limitations of a single machine, allowing more data to be visualized.
</p>

<a name="medical"></a>
<h3>Medical Imaging</h3>
<p>
  Medical Imaging produces volume data sets from various sources, for example
  MRI scanners. Visualizing this data is challenging, since it quickly outgrows
  the memory and fill rate capacity of a single graphics card. On the other
  hand, volume rendering is one of the best candidates for parallel
  rendering. Equalizer contains a volume rendering example to illustrate the
  benefit of scalable rendering and as a guideline for custom developments.
</p>

<a name="oilgas"></a>
<h3>Oil and Gas</h3>
<p>
  From a parallelization standpoint, the Oil and Gas industry has similar
  visualization requirements as the medical imaging sector. Huge volume data
  sets of reservoir simulations have to be visualized, often in collaborative or
  immersive environments. The flexibility of Equalizer allows to use scalable
  rendering also in immersive installations.
</p>

<div class="footnote">
<p>
  SLI&trade; is a trademark of NVIDIA Corporation. Crossfire&trade; is a
  trademark of ATI Technologies Inc. All other products named are trademarks of
  their respective owners.
</p>
<p>
  3D models courtesy of <a href="http://www.cyberware.com">Cyberware</a>
  , <a href="http://graphics.stanford.edu/data/3Dscanrep/">Stanford University
  Computer Graphics Laboratory</a> and Computer Science Institute, University of
  Freiburg, Germany.
</p>
</div>

#include "footer.shtml"
<!-- $Id$ -->
