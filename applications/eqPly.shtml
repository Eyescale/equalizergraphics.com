#define S_APPLICATIONS
#define S_APPLICATIONS_EQPLY
#define PAGE Applications
#define SUBPAGE eqPly: Parallel Polygonal Renderer

#include "header.shtml"

<h2>Overview</h2>
<div class="float_right">
  <a href="/applications/images/eqPly.png">
    <img src="/applications/images/eqPly-small.jpg" 
         alt="eqPly polygonal renderer"></a>
  <div class="label">eqPly</div>
</div>
<p>
  The <a href="/cgi-bin/viewvc.cgi/trunk/src/examples/eqPly">eqPly example</a>
  is the reference implementation of an Equalizer application. It does render
  polygonal data, read from a ply file. It supports all Equalizer scalability
  features.
</p>
<p>
  The <a href="/survey.html">Programming Guide</a> covers the application
  structure of eqPly extensively. A semester thesis in German
  (<a href="/documents/Developer/eqPly.pdf">Entwicklung eines parallelen OpenGL
  Polygon-Renderers</a>) covers the kd-tree implementation for Equalizer 0.4.
</p>

<h2>Application Structure</h2>
<p>
  As with any Equalizer application, eqPly consists of the main application and
  the rendering clients. In this simple example, they are both contained in the
  same executable. The executable can also be run as
  a <a href="/documents/design/residentNodes.html">resident render client</a>,
  which is used to pre-launch rendering clients manually.
</p>

<h3>Application Main Loop</h3>
<p>
  The main application is driving the rendering, that is, it controls the
  execution flow by receiving events from the render nodes, acting on these
  events and by issuing the rendering of new frames. It does not execute any
  rendering code.
</p>

<h3>Render Nodes</h3>
<p>
  The main function executes first eq::init(), which will not return when the
  program is launched by the server as a render client. The Equalizer library
  connects the render client to the server, and receives commands from this
  server. The individual rendering entities --nodes, pipes, windows, channels--
  are created using the NodeFactory. On these entities, various functions,
  e.g. init, update and exit, are called based on the commands received from the
  server. These callback functions typically receive an identifier defined by
  the application to provide contextual information. For example, the node's
  init method receives the identifier of the InitData object, as defined by the
  application. It instantiates the object and loads the polygonal model named by
  the InitData. A seperate document describes
  all <a href="/documents/design/taskMethods.html">task methods</a>.
</p>

<h3>Event Processing</h3>
<p>
  Equalizer collects events for all windows asynchronously and sends them to the
  application thread, where they are processed at the end of the frame by
  Config::handleEvent. This example implements a trackball, move and zoom mouse
  interaction, as well as some keystroke commands. A separate document describes
  the <a href="/documents/design/eventHandling.html">event handling</a>.
</p>



<h2>Usage</h2>
<p>
  <!-- /* --><pre>
USAGE: 

   ./build/Darwin/bin/eqPly.app/Contents/MacOS/eqPly  [-o] [-a &lt;string&gt;]
                                        [-l &lt;string&gt;] [-i] [-g] [-c
                                        &lt;string&gt;] [-w &lt;string&gt;] [-n
                                        &lt;unsigned&gt;] [-r] [-b] [-p &lt;string&gt;]
                                        [-m &lt;string&gt;] ...  [--] [--version]
                                        [-h]


Where: 

   -o,  --noOverlay
     Disable overlay logo

   -a &lt;string&gt;,  --cameraPath &lt;string&gt;
     File containing camera path animation

   -l &lt;string&gt;,  --log &lt;string&gt;
     output log file

   -i,  --invertFaces
     Invert faces (valid during binary file creation)

   -g,  --glsl
     Enable GLSL shaders

   -c &lt;string&gt;,  --renderMode &lt;string&gt;
     Rendering Mode (immediate, displayList, VBO)

   -w &lt;string&gt;,  --windowSystem &lt;string&gt;
     Window System API ( one of: AGL glX )

   -n &lt;unsigned&gt;,  --numFrames &lt;unsigned&gt;
     Maximum number of rendered frames

   -r,  --resident
     Keep client resident (see resident node documentation on website)

   -b,  --blackAndWhite
     Don't use colors from ply file

   -p &lt;string&gt;,  --port &lt;string&gt;
     tracking device port

   -m &lt;string&gt;,  --model &lt;string&gt;  (accepted multiple times)
     ply model file name or directory

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.


   eqPly - Equalizer polygonal rendering example

        Run-time commands:
                Left Mouse Button:         Rotate model
                Middle Mouse Button:       Move model in X, Y
                Right Mouse Button:        Move model in Z
                &lt;Cursor Keys&gt;:             Move head in X,Y plane
                &lt;Page Up,Down&gt;:            Move head in Z
                &lt;Esc&gt;, All Mouse Buttons:  Exit program
                &lt;Space&gt;:                   Reset camera
                F1, h:                     Toggle help overlay
                i:                         Reset camera for Immersive Setups
                o:                         Toggle perspective/orthographic
                s:                         Toggle statistics overlay
                w:                         Toggle wireframe mode
                d:                         Toggle color demo mode
                p:                         Toggle navigation mode (trackball, walk)
                r:                         Switch rendering mode (display list, VBO,   immediate)
                v:                         Switch active canvas
                v:                         Switch active view
                m:                         Switch model for active view
                l:                         Switch layout for active canvas
  </pre><!-- */ -->
</p>

#include "footer.shtml"
<!-- $Id$ -->
