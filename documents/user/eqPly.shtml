#define S_DOCUMENTATION
#define S_DOCUMENTATION_ENDUSER
#define PAGE Documentation
#define SUBPAGE End User
#define TITLE Parallel Polygonal Renderer

#include "header.shtml"

<h2>Overview</h2>
<p>
  The <a href="/cgi-bin/viewvc.cgi/trunk/src/examples/eqPly">eqPly example</a>
  is the primary Equalizer sample implementation. It does render polygonal data,
  read from a ply file. I supports all Equalizer compound features, namely 2D
  (sort-first), DB (sort-last) and Eye (stereo) decompositions. In DB mode, each
  contributor renders it's part of a model in a different color to illustrate
  the database decomposition.
</p>

<h2>Application Structure</h2>
<p>
  As any Equalizer application, eqPly consists of the main application and the
  rendering clients. In this simple example, they are both contained in the same
  executable. The executable can also be run as
  a <a href="documents/design/residentNodes.html">resident render client</a>,
  which is used to pre-launch rendering nodes manually.
</p>

<h3>Application Main Loop</h3>
<p>
  The main application is driving the rendering, that is, it controls the
  execution flow by receiving events from the render nodes, acting on these
  events and by issuing the rendering of new frames. It does not execute any
  rendering code.
</p>

<h3>Render Nodes</h3>
<p>
  The main function executes first eq::init(), which will not return when the
  program is launched by the server as a render client. The Equalizer library
  connects the render client to the server, and receives commands from this
  server. The individual rendering entities --nodes, pipes, windows, channels--
  are created using the NodeFactory. On these entities, various functions,
  e.g. init, update and exit, are called based on the commands received from the
  server. These callback functions typically receive an identifier defined by
  the application to provide contextual information. For example, the node's
  init method receives the identifier of the InitData object, as defined by the
  application. It instanciates the object and loads the polygonal model named by
  the InitData. A seperate document describes
  all <a href="documents/design/taskMethods.html">task methods</a>.
</p>

<h3>Event Processing</h3>
<p>
  Equalizer collects events for all windows asynchronously and sends them to the
  application thread, where they are processed at the end of the frame by
  Config::handleEvent. This example implements a trackball, move and zoom mouse
  interaction, as well as some keystroke commands. A seperate document describes
  the <a href="documents/design/eventHandling.html">event handling</a>.
</p>



<h2>Usage</h2>
<p>
  <!-- /* --><pre>
USAGE: 

   ./eqPly  [-c unsigned short] [-n unsigned] [-b] [-p string] [-m
            string] [--] [--version] [-h]


Where: 

   -c unsigned short,  --client unsigned short
     Run as resident render client

   -n unsigned,  --numFrames unsigned
     Maximum number of rendered frames

   -b,  --bw
     Don't use colors from ply file

   -p string,  --port string
     tracking device port

   -m string,  --model string
     ply model file name

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.
  </pre><!-- */ -->
</p>

#include "footer.shtml"
<!-- $Id$ -->
