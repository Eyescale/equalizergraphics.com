#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Stereo and Head Tracking

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br>
  State:
  <ul>
    <li>Implemented in 0.2</li>
    <li>HMD: implemented in 0.9</li>
    <li>Observers: implemented in 0.9</li>
    <li>Focal Distance: implemented in 1.2</li>
  </ul>
</p>

<h2>Overview</h2>
<p>
  For stereo viewing, typically two different views are rendered, one for each
  eye. The display setup ensures that each eye sees the correct view, either by
  time-multiplexing the left/right images (active stereo) or by using
  polarization filters (passive stereo). Some autostereoscopic or holographic
  displays require more than two views, since the project to multiple viewer
  positions in space.
</p><p>
  Head tracking is often used with stereo rendering. The viewer position is
  tracked, and the rendering is adapted to give the observer the illusion of a
  fixed scene in 3D space.
</p>
  
<h2>Stereo Rendering</h2>
<div class="float_left"><a href="/documents/design/images/mono.png">
    <img src="/documents/design/images/mono-small.jpg" 
         alt="View frustum for monoscopic rendering"></a>
  <div class="label">Monoscopic View Frustum</div>
</div>
<p>
  Equalizer uses the notion of an eye pass in the compound specification. If
  nothing is specified, the compound renders one view for monoscopic viewing,
  for the <code>CYCLOP</code> eye, as shown on the right. With the
  compound's <code>eye</code> field the eye passes are specified. The eye passes
  are inherited to children, unless the children overwrite the eye field.
</p>
<div class="float_right"><a href="/documents/design/images/stereo.png">
    <img src="/documents/design/images/stereo-small.jpg" 
         alt="View frusta for stereo rendering"></a>
  <div class="label">Stereoscopic View Frusta</div>
</div>
<p> 
  To use active stereo, the window has to have a stereo visual and the
  compound has to specify the left and right eye using 
  <code>eye [ LEFT RIGHT ]</code>. Equalizer then executes two rendering passes,
  and uses the eye base to adjust the view frusta as shown on the left.
</p><p> 
  For passive stereo, two output channels are used and projected onto the same
  surface. Typically two compounds would be used, one rendering the left eye
  using the channel connected to the left projector, and the other rendering the
  right eye using the same wall description.
</p><p>
  The window attribute <code>hint_stereo</code> can be used to request a
  quad-buffered stereo visual. The distance between the left and right eye is
  specified using the config attribute <code>eye_base</code>.
</p><div class="flush_float"></div>

<h2>Immersive Visualization</h2>
<div class="float_right"><a href="/documents/design/images/immersive.png">
    <img src="/documents/design/images/immersive-small.jpg" 
         alt="Head Tracking with stereo frusta"></a>
  <div class="label">Stereo Frusta with Head Tracking</div>
</div>
<p>
  For immersive installations, the head position is tracked and view frusta are
  adapted to the viewers position and orientation, as shown on the right. The
  head position is reported by the application
  using <code>Config::setHeadMatrix</code>, which is used by the server to
  compute the eye positions (cyclop, left, right). These eye positions, together
  with the wall description, are used to compute an OpenGL frustum and the head
  transformation to position the frustum. The default head matrix is an identity
  matrix, thus the default eye positions are <code>( +-eye_base/2, 0, 0
  )</code>, as shown above in the stereoscopic view frusta.
</p>

<a name="HMD"></a>
<h2>Head-Mounted Displays (HMD)</h2>
<div class="float_left"><a href="/documents/design/images/HMD.png">
    <img src="/documents/design/images/HMD-small.jpg" 
         alt="View frusta for head-mounted displays"></a>
  <div class="label">View Frusta for Head-Mounted Displays</div>
</div>
<p>
  Head-mounted displays move the display 'wall' with the observer, they are
  fixed in front of the viewer. In Equalizer terms, the head matrix defines the
  position of the wall. The eyes and the frustum are using the head matrix.
</p>
<p>
  HMD's are configured using a wall description. When the type of the wall
  description is set to HMD, the frustum is tracked using the current head
  matrix.
</p>

<a name="observers"></a>
<h2>Multiple Observers</h2>
<p>
  The configuration holds a list of observers. Each observer has its own head
  matrix and eye separation. One observer tracks multiple views. For further
  information on multiple observer and their integration with the Layout API
  please refer to the <a href="/documents/design/view.html">specification</a>.
</p>
<div class="flush_float"></div>

<a name="focal"></a>
<h2>Focal Distance</h2>

<div class="float_right"><a href="/documents/design/images/focalFixed.png">
    <img src="/documents/design/images/focalFixed-small.jpg" 
         alt="Fixed focal distance"></a>
  <div class="label">Fixed focal distance</div>
</div>
<h3>Fixed Focal Distance</h3>
<p>
  The focal distance defines at which range the left and right eye converge into
  the same image. Objects placed at the focal distance do not have a stereo
  divergence.
</p>
<p>
  In the current implementation (0.9.3), the focal distance is equal to the
  physical projection wall, as shown in the right image. As the observer moves
  closer to a wall, the focal distance converges to 0 and often causes
  discomfort, when the observer is looking at a model behind the physical wall
  since the rendered focal distance does not correspond to the viewed focal
  distance.
</p>
<p>
  The application has to be able to set the focal distance
  using <code>Observer::setFocalDistance</code>. The focal distance is either
  given by the user, depending on the scene, or calculated automatically, e.g.,
  by using the distance of the closest object in the view direction.
</p>
<div class="flush_float"></div>

<div class="float_right"><a href="/documents/design/images/focalOrigin.png">
    <img src="/documents/design/images/focalOrigin-small.jpg" 
         alt="Focal distance relative to the origin"></a>
  <div class="label">Focal distance relative to the origin</div>
</div>
<h3>Focal Distance relative to World</h3>
<p>
  The first implementation computes the focal distance relative to the origin,
  as shown on the right. This setting might change on a per-frame basis. When
  the observer moves, the focal distance between the observer and the focused
  object changes. While this is not semantically correct, it has the benefit of
  providing a stable convergence plane (see second implementation below).
</p>
<h4>Implementation:</h4>
<p>
  See below, except use identity head matrix for ratio computation.
</p>
<div class="flush_float"></div>

<div class="float_right"><a href="/documents/design/images/focalObserver.png">
    <img src="/documents/design/images/focalObserver-small.jpg" 
         alt="Focal distance relative to the observer"></a>
  <div class="label">Focal distance relative to the observer</div>
</div>
<h3>Focal Distance relative to Observer</h3>
<p>
  The second implementation computes the focal distance relative to the
  observer, as shown on the right. The observer view direction determines the
  focal plane, as described in the following paragraph. This causes the stereo
  convergence to change continously as the observer looks around, which might
  not be comfortable. This is shown be the dotted circle which determines the
  possible focal planes.
</p>
<p>
  The nearest wall plane in the observer's view direction is placed to intersect
  <code>observer_position + view_vector * focal_distance</code>. This determines
  the ratio by which all walls are moved. For each wall corner, the new corner
  position is <code>corner_new = (corner_old - cyclop_eye) * ratio</code>.
</p>
<p>
  The wall plane equation instead of the 'clipped' wall is used for continuity
  when the observer looks 'over' a wall. Using the nearest plane ensures that
  wall the observer looks at is used. If no wall is in the view direction, the
  last computation is kept.
</p>
<div class="flush_float"></div>

<div class="float_right"><img src="/documents/design/images/focalRatio.png" 
                              alt="Calculating the focus ratio">
  <div class="label">Calculating the focus ratio</div>
</div>
<h4>Task Breakdown</h4>
<ul>
  <li>Add new Observer attribute 'focusDistance' (getter, setter,
    serialization)</li>
  <li>Add server-side notification-on-changes</li>
  <li>Refactor server::Observer::_updateEyes to _updateHead (updates eyes and
    all view frusta)</li>
  <li>server::View::changeFocusDistance invokes:</li>
  <li>server::View::updateFrusta</li>
  <ul>
    <li>Find closest wall in view direction using plane equations</li>
    <li>Compute ratio to move wall to focus distance: <code>ratio =
        focal_distance / v.length with v = observer->wall along view
        direction</code></li>
    <li>Invoke FrustumUpdater with given ratio</li>
    <li>Move all wall coordinates by ratio in Compound::updateFrustum:
      <code>top_left = top_left * ratio</code></li>
  </ul>
  <li>Same logics to move view wall, finding the wall is trivial</li>
  <li>Same logics for untracked views, using config attributes (relative to
    observer falls back to relative to origin due to lack of observer)</li>
</ul>
<div class="flush_float"></div>

<h2>Eye compounds</h2>
<p>
  Eye compounds parallelize the rendering of the eye passes, by assigning each
  eye pass to a different channel and recombining the result. For passive
  stereo, where the channels are separated for display, parallelization can be
  achieved by using a different pipe (graphics card) for each channel. For
  active stereo, one of the eyes can be rendered on a different pipe and
  transferred to the correct draw buffer using the compound output and input
  frames. The Equalizer distribution contains example config files.
</p><div class="flush_float"></div>

<h2>API</h2>
<!-- /* --><pre>
  void Config::setHeadMatrix( const vmml::Matrix4f& matrix );
</pre><!-- */ -->

<h2>File Format</h2>
<!-- /* --><pre>
    global
    {
        EQ_CONFIG_FATTR_EYE_BASE            float
        EQ_CONFIG_FATTR_FOCUS_DISTANCE      float
        EQ_CONFIG_IATTR_FOCUS_MODE          fixed | relative_to_origin | relative_to_observer
        EQ_WINDOW_IATTR_HINT_STEREO         OFF | ON | AUTO
    }
    config // 1-n times, currently only the first one is used by the server
    {
        attributes
        {
             eye_base float // distance between left and right eye
             focus_distance float
             focus_mode     fixed | relative_to_origin | relative_to_observer
        }
    }
    window
    {
        attributes
        {
            hint_stereo         off | on | auto
        }
    }
    observer
    {
         eye_base float // distance between left and right eye
         focus_distance float
         focus_mode     fixed | relative_to_origin | relative_to_observer
    }
    compound
    {
        eye      [ CYCLOP LEFT RIGHT ]   // monoscopic or stereo view
    }
    wall
    {
        ...
        type fixed | HMD
    }
</pre><!-- */ -->

<a name="Issues"></a>
<h2>Open Issues</h2>
<p>
  Autostereoscopic displays with multiple views - define new eye passes?
</p>

#include "footer.shtml"
<!-- $Id$ -->
