#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE OpenGL Object Manager

#include "header.shtml"

<p>
Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
State:
<ul>
  <li>Default window object manager in 0.5</li>
  <li>Textures, buffers and minor improvements implemented in 0.4</li>
  <li>Base class and display lists implemented in 0.3</li>
</ul>
</p>

<h2>Overview</h2>
<p>
  The purpose of the object manager is to facilitate the management of OpenGL
  objects, e.g., texture IDs and display lists, in a multipipe
  application. Objects are allocated and queried using a key. Windows sharing
  the same OpenGL context will use the same object manager.
</p>

<h2>Objects</h2>
<p>
  The API will be created as needed. Possible object types are: display lists,
  textures, GLSL shaders, VBO's, etc. See the 
  <a href="/cgi-bin/viewvc.cgi/trunk/src/lib/util/objectManager.h?view=markup">header file</a>
 (src/lib/util/objectManager.h) for the currently implemented types.
</p>

<h2>eq::Window Object Manager</h2>
<p>
  Each window has an object manager with the key type <code>const void*</code>
  for as long as it has an OpenGL context. The OM is shared between all windows
  of a pipe, if the windows are created using the
  default <code>configInit</code> functions. If the window is created by the
  application, the OM is not shared since no assumption can be made about OpenGL
  context sharing.
</p>

<h2>API</h2>
<p>
  For each type of object, the following functions are available:
  <ul>
    <li><b>supportsObjects</b> returns true if the usage for this particular
      type of objects is supported. For basic objects, which are supported on
      all OpenGL implementations, this function is not implemented.</li>
    <li><b>getObject</b> returns the object associated with the key, or
      FAILED. Increases the reference count of existing objects.</li>
    <li><b>newObject</b> allocates a new object for a key. Returns FAILED if the
      object already exists or if the allocation failed. Sets the reference
      count of a newly created object to one.</li>
    <li><b>obtainObject</b> convenience function which gets or obtains the
      object associated with the key. Returns FAILED only if the object
      allocation failed.</li>
    <li><b>releaseObject</b> decreases the reference count and deletes the
      object if the reference count reaches 0.</li>
    <li><b>deleteObject</b> forcibly deletes the object. To be used if
      reference counting is not desired.</li>
  </ul>
</p>
<p>
  Example API for display list management:
  <pre>
  template< typename T >
  class ObjectManager : public eq::base::NonCopyable
  {
  public:
      GLuint getList( const T& key );
      GLuint newList( const T& key );
      GLuint obtainList( const T& key );
      void   releaseList( const T& key );
      void   releaseList( const GLuint id );
      void   deleteList( const T& key );
      void   deleteList( const GLuint list );
  }

  typedef ObjectManager< const char* > ObjectManagerS;
  ObjectManagerS& eq::Window::getObjectManager();
  </pre>
</p>

#include "footer.shtml"
<!-- $Id$ -->
