#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Statistics Interface

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
  State: 
  <ul>
    <li>Implemented in 0.2</li>
    <li><a href="/equalizergraphics.com/documents/design/statisticsOverlay.html">Statistics
        Overlay</a> implemented in 0.5.1</li>
  </ul>
</p>

<p>
  This document describes the first evolution of the statistics interface. With
  new requirements, for example load balancing, this interface will evolve much
  further.
</p>

<h2>Specification</h2>
<p>
  Statistics are measured in milliseconds since the configuration was
  initialized. On each node, the global configuration clock is reset at the same
  time by the server during <code>Config::init</code>. Each statistic event
  records the originator's (channel, window or config) unique identifier.
</p>
<p>
  Statistics are enabled per entity using an attribute hint. The hint determines
  how precise the gathered statistics are. When set to fastest, the per-frame
  clock is sampled directly when the event occurs. When set to nicest, all
  OpenGL commands will be finished before sampling certain events, which incurs
  a performance penalty. The default setting is fastest in release builds, and
  nicest in debug builds.
</p>
<p>
  The events are processed by the channel's and
  window's <code>processEvent</code>. The default implementation sends these
  events to the config. The default implementation
  of <code>Config::handleEvent</code> sorts the received events per frame and
  per originator. When a frame has been finished, the events are pushed to the
  local (app-)node for visualization.
</p>

<h2>File Format</h2>
<!-- /* --><pre>
  global
  {
      EQ_CHANNEL_IATTR_HINT_STATISTICS    off | fastest [on] | nicest
  }
  channel
  {
      attributes
      {
          hint_statistics     off | fastest [on] | nicest
      }
  }
</pre><!-- */ -->

<h2>API</h2>
<h3>New Types</h3>
<!-- /* --><pre>
  struct StatEvent 
  {
  public:
      enum Type
      {
          CHANNEL_CLEAR,
          CHANNEL_DRAW,
          CHANNEL_ASSEMBLE,
          CHANNEL_READBACK,
          CHANNEL_TRANSMIT,
          CHANNEL_COMPRESS,
          TYPE_ALL          // must be last
      };

      Type     type;
      uint32_t objectType;
      uint32_t objectID;
      float    startTime;
      float    endTime;
  };
</pre><!-- */ -->

<h3>New Functions</h3>
<!-- /* --><pre>
  float Pipe::getFrameTime() const;
  void  Pipe::addStatEvent( const StatEvent& event );
</pre><!-- */ -->

#include "footer.shtml"
<!-- $Id$ -->
