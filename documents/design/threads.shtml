#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Threads

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
  <ul>
    <li>Implemented in 0.3</li>
    <li>0.4: Added thread synchronization to reflect changes from per-node
      thread synchronization</li>
    <li>0.6-rc1: Added easier threading model selection</li>
  </ul>
</p>

<h2>Threads</h2>

<h3>Application (app/node) Main Thread</h3>
<p>
  The app thread is the main execution thread of an Equalizer application,
  typically the one running main(). It drives the application's rendering and
  executes <a href="/documents/design/taskMethods.html#node">node tasks</a>
  and <a href="/documents/design/nonthreaded.html">nonthreaded rendering</a>
  tasks.
</p>

<h3>Render Client (node) Main Thread</h3>
<p>
  The render client main thread is very similar to the application thread, in
  that it executes <a href="/documents/design/taskMethods.html#node">node
  tasks</a> and <a href="/documents/design/nonthreaded.html">nonthreaded
  rendering</a> tasks. The only difference is that it does not drive the
  application's, and that the main loop is controlled by the Equalizer client
  library.
</p>

<h3>Receiver (recv) Thread</h3>
<p>
  Each Equalizer network node has a receiver thread, created during
  Node::initLocal(). It listens on all connections and reads the data into
  packets. The packets are <a href="/documents/design/packets.html">dispatched
    to the command handler functions</a>. The command handler functions in the
  receiver thread should never block to avoid deadlocks.
</p>

<h3>Command (cmd) Thread</h3>
<p>
  Each Equalizer network node has a command thread, created during
  Node::initLocal(). It executes internal Equalizer commands, for example to
  execute <code>eq::net::Object</code> mapping requests by a slave node.
</p>

<h3>Node Transmit Thread</h3>
<p>
  Each <code>eq::Node</code> has a transmit thread, created during
  intialization. It executes the compression and network transmission of output
  frames to the nodes using them as input frames.
</p>

<h3>Pipe Thread(s)</h3>
<p>
  All commands for a pipe and its siblings (windows, channels) are executed in a
  separate thread for optimal performance. The commands are dispatched from the
  receiver thread to the node thread using a fifo. Therefore, the pipe thread
  may block its execution. An exception are nonthreaded pipes, which are
  executed from the main thread.
</p>

<a name="sync"></a>
<h2>Thread Synchronization</h2>

<h3>Threading Models</h3>
<p>
  Equalizer provides simplified threading models to configure common thread
  synchronization strategies. The threading model is a node attribute
  (<code>thread_model</code>) and can have the following values:
</p>
<ul>
  <li><code>async</code>: No synchronization between render threads. Only the
    finishing of frame <code>n-latency</code> is synchronized. Most Equalizer
    examples use this threading model.
  <li><code>draw_sync</code>: In addition to async, all local render threads are
    synchronized, so that the draw operations happen synchronously with the
    node main loop. This is the default threading model.
  <li><code>local_sync</code>: In addition to draw_sync, all local frame
    operations, including readback, assemble and swap buffer are synchronized
    with the node main loop.
  <li><code>sync</code>: The execution across all nodes is synchronous. Not yet
    implemented.
</ul>
<p>
  The threading model can be configured using the file format, or
  programmatically. Applications typically hard-code their threading model. The
  file format is commonly used to change the threading model for benchmarking
  and experimentation.
</p>

<h3>Implementation</h3>
<div class="float_right">
  <a href="/documents/design/images/mainloop.png">
    <img src="/documents/design/images/mainloop-small.jpg" 
         alt="Application and render client main loops"/></a>
  <div class="label">Application and render client main loops</div>
</div>
<p>
  The default thread synchronization synchronizes
  all <code>Channel::frameDraw</code> operations on a single node with the
  node's main thread. This facilitates porting, since the scene database does
  not have to be multi-buffered. Advanced applications can remove per-node frame
  synchronization.
</p>
<p>
  The per-node frame synchronization is achieved through
  the <code>startFrame, waitFrameStarted</code>
  and <code>releaseFrameLocal, waitFrameLocal</code> synchronization
  points. Note that this synchronization is only per-node, different nodes in
  the cluster still run asynchronously.
</p>
<p>
  The first one ensures that the application (node) thread is done modifiying
  the data. The pipe threads call <code>Node::waitFrameStarted</code> which
  blocks until the node calls <code>startFrame</code>
  in <code>Node::frameStart</code>.
</p>
<p>
  The second pair ensures that after <code>Config::finishFrame</code> all pipe
  threads are done rendering the current frame. The
  node's <code>frameDrawFinish</code> waits for all local pipes to release the
  synchronization by calling <code>Pipe::releaseFrameLocal</code>, which happens
  by default
  in <code>Pipe::frameDrawFinish</code>. The <code>frameDrawFinish</code>
  methods are called after all <code>Channel::frameDraw</code> of the
  corresponding thread have been executed.
</p>
<p>
  Applications which multi-buffer all dynamic data can completely remove frame
  synchronization by:
</p>
<ul>
  <li>releasing the local synchronization in <code>Node::frameStart</code></li>
  <li>not calling <code>Node::waitFrameStarted</code>
    in <code>Pipe::frameStart</code></li>
  <li>not waiting for the pipe synchronization
    in <code>Node::frameDrawFinish</code></li>
</ul>

#include "footer.shtml"
<!-- $Id$ -->
