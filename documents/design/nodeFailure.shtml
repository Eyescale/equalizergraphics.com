#define S_DOCUMENTATION
#define S_DOCUMENTATION_DEVELOPER
#define PAGE Documentation
#define SUBPAGE Developer
#define TITLE Node Failures

#include "header.shtml"

<p>
  Author: <a href="mailto:eilemann@gmail.com">eilemann@gmail.com</a><br/>
  State: Design based on 0.9.1+svn
</p>

<h2>Overview</h2>
<p>
  Equalizer is currently designed to be completely frame driven, that is, any
  node failure will result in a failure of the whole config. The purpose of this
  document is to explore ways to make Equalizer more resilient against failures.
</p>

<h2>Launching</h2>
<p>
  Equalizer already detects the failure of a node to launch. To run a
  configuration observing such a failure, implement to following:
  <ul>
    <li>A new config attribute to allow init failures</li>
    <li>Leave each unlaunched node in the INIT_FAILED state</li>
    <li>Deactivate all dependent compounds</li>
    <li>Ignore any layout switch on inactive compounds</li>
  </ul>
  This will allow to launch configurations even if one of the nodes in the
  cluster is offline. If the failed node is a source-only node, the
  configurations will run flawlessly, with slightly degraded performance. If it
  is a destination node, the corresponding display segment will not be
  updated. Any dependent source nodes are automatically deactivated and will not
  be re-assigned to other destination channels, unless they had been already
  assigned by a view equalizer (cross-segment LB).
</p>

<h2>Runtime Failures</h2>
<p>
  Runtime Failures and launch failures are handled in the same way. The
  node is considered to be failed, and can therefore not produce any
  output frames or participate in a barrier. The open issues are how to detect
  node failure, assign timeouts to all blocking operations and handle them. This
  will be problematic, in particular the generic operations and connection
  handling in <code>eq::net</code>.
</p>


#include "footer.shtml"
<!-- $Id$ -->
